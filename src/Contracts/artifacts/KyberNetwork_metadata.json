{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					},
					{
						"internalType": "contract IKyberStorage",
						"name": "_kyberStorage",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "previousAdmin",
						"type": "address"
					}
				],
				"name": "AdminClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAlerter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isAdd",
						"type": "bool"
					}
				],
				"name": "AlerterAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "EtherReceival",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sendTo",
						"type": "address"
					}
				],
				"name": "EtherWithdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract IGasHelper",
						"name": "newGasHelper",
						"type": "address"
					}
				],
				"name": "GasHelperUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract IKyberDao",
						"name": "newKyberDao",
						"type": "address"
					}
				],
				"name": "KyberDaoUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract IKyberFeeHandler",
						"name": "newKyberFeeHandler",
						"type": "address"
					}
				],
				"name": "KyberFeeHandlerUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract IKyberMatchingEngine",
						"name": "newKyberMatchingEngine",
						"type": "address"
					}
				],
				"name": "KyberMatchingEngineUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "maxGasPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "negligibleRateDiffBps",
						"type": "uint256"
					}
				],
				"name": "KyberNetworkParamsSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isEnabled",
						"type": "bool"
					}
				],
				"name": "KyberNetworkSetEnable",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "kyberProxy",
						"type": "address"
					}
				],
				"name": "KyberProxyAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "kyberProxy",
						"type": "address"
					}
				],
				"name": "KyberProxyRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "src",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "dest",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ethWeiValue",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "networkFeeWei",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "customPlatformFeeWei",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32[]",
						"name": "t2eIds",
						"type": "bytes32[]"
					},
					{
						"indexed": false,
						"internalType": "bytes32[]",
						"name": "e2tIds",
						"type": "bytes32[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "t2eSrcAmounts",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "e2tSrcAmounts",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "t2eRates",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "e2tRates",
						"type": "uint256[]"
					}
				],
				"name": "KyberTrade",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "reserves",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "add",
						"type": "bool"
					}
				],
				"name": "ListedReservesForToken",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "newOperator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isAdd",
						"type": "bool"
					}
				],
				"name": "OperatorAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sendTo",
						"type": "address"
					}
				],
				"name": "TokenWithdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "pendingAdmin",
						"type": "address"
					}
				],
				"name": "TransferAdminPending",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newAlerter",
						"type": "address"
					}
				],
				"name": "addAlerter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "kyberProxy",
						"type": "address"
					}
				],
				"name": "addKyberProxy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOperator",
						"type": "address"
					}
				],
				"name": "addOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "admin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "enabled",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAlerters",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAndUpdateNetworkFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "networkFeeBps",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getContracts",
				"outputs": [
					{
						"internalType": "contract IKyberFeeHandler",
						"name": "kyberFeeHandlerAddress",
						"type": "address"
					},
					{
						"internalType": "contract IKyberDao",
						"name": "kyberDaoAddress",
						"type": "address"
					},
					{
						"internalType": "contract IKyberMatchingEngine",
						"name": "kyberMatchingEngineAddress",
						"type": "address"
					},
					{
						"internalType": "contract IKyberStorage",
						"name": "kyberStorageAddress",
						"type": "address"
					},
					{
						"internalType": "contract IGasHelper",
						"name": "gasHelperAddress",
						"type": "address"
					},
					{
						"internalType": "contract IKyberNetworkProxy[]",
						"name": "kyberProxyAddresses",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "src",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "dest",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "srcQty",
						"type": "uint256"
					}
				],
				"name": "getExpectedRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "expectedRate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "worstRate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "src",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "dest",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "srcQty",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "platformFeeBps",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "hint",
						"type": "bytes"
					}
				],
				"name": "getExpectedRateWithHintAndFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "rateWithNetworkFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rateWithAllFees",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNetworkData",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "negligibleDiffBps",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "networkFeeBps",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expiryTimestamp",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOperators",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "startIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endIndex",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "add",
						"type": "bool"
					}
				],
				"name": "listReservesForToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "add",
						"type": "bool"
					}
				],
				"name": "listTokenForReserve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxGasPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingAdmin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "alerter",
						"type": "address"
					}
				],
				"name": "removeAlerter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "kyberProxy",
						"type": "address"
					}
				],
				"name": "removeKyberProxy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "removeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IKyberFeeHandler",
						"name": "_kyberFeeHandler",
						"type": "address"
					},
					{
						"internalType": "contract IKyberMatchingEngine",
						"name": "_kyberMatchingEngine",
						"type": "address"
					},
					{
						"internalType": "contract IGasHelper",
						"name": "_gasHelper",
						"type": "address"
					}
				],
				"name": "setContracts",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "enable",
						"type": "bool"
					}
				],
				"name": "setEnable",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IKyberDao",
						"name": "_kyberDao",
						"type": "address"
					}
				],
				"name": "setKyberDaoContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_maxGasPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_negligibleRateDiffBps",
						"type": "uint256"
					}
				],
				"name": "setParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "trader",
						"type": "address"
					},
					{
						"internalType": "contract ERC20",
						"name": "src",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "srcAmount",
						"type": "uint256"
					},
					{
						"internalType": "contract ERC20",
						"name": "dest",
						"type": "address"
					},
					{
						"internalType": "address payable",
						"name": "destAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "maxDestAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minConversionRate",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "walletId",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "hint",
						"type": "bytes"
					}
				],
				"name": "tradeWithHint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "destAmount",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "trader",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "src",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "srcAmount",
						"type": "uint256"
					},
					{
						"internalType": "contract IERC20",
						"name": "dest",
						"type": "address"
					},
					{
						"internalType": "address payable",
						"name": "destAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "maxDestAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minConversionRate",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "platformWallet",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "platformFeeBps",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "hint",
						"type": "bytes"
					}
				],
				"name": "tradeWithHintAndFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "destAmount",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "transferAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "transferAdminQuickly",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "sendTo",
						"type": "address"
					}
				],
				"name": "withdrawEther",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "sendTo",
						"type": "address"
					}
				],
				"name": "withdrawToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addKyberProxy(address)": {
					"details": "No. of kyberProxies is capped"
				},
				"claimAdmin()": {
					"details": "Allows the pendingAdmin address to finalize the change admin process."
				},
				"getAndUpdateNetworkFee()": {
					"details": "Note that this function can be triggered by anyone, so that     the first trader of a new epoch can avoid incurring extra gas costs"
				},
				"getExpectedRate(address,address,uint256)": {
					"details": "Gets the expected and slippage rate for exchanging src -> dest tokenworstRate is hardcoded to be 3% lower of expectedRate",
					"params": {
						"dest": "Destination token",
						"src": "Source token",
						"srcQty": "Amount of src tokens in twei"
					},
					"returns": {
						"expectedRate": "for a trade after deducting network fee. ",
						"worstRate": "for a trade. Calculated to be expectedRate * 97 / 100"
					}
				},
				"getExpectedRateWithHintAndFee(address,address,uint256,uint256,bytes)": {
					"details": "gets the expected rates when trading src -> dest token, with / without fees",
					"params": {
						"dest": "Destination token",
						"hint": "Advanced instructions for running the trade ",
						"platformFeeBps": "Part of the trade that is allocated as fee to platform wallet. Ex: 1000 = 10%",
						"src": "Source token",
						"srcQty": "Amount of src tokens in twei"
					},
					"returns": {
						"rateWithAllFees": "= actual rate. Rate after accounting for both network and platform fees",
						"rateWithNetworkFee": "Rate after deducting network fee but excluding platform fee"
					}
				},
				"getNetworkData()": {
					"params": {
						"expiryTimestamp": "Timestamp for which networkFeeBps will expire,     and needs to be updated by calling kyberDao contract / set to default",
						"negligibleDiffBps": "Negligible rate difference (in basis pts) when searching best rate",
						"networkFeeBps": "Network fees to be charged (in basis pts)"
					}
				},
				"listReservesForToken(address,uint256,uint256,bool)": {
					"details": "Allow or prevent to trade token -> eth for list of reserves      Useful for migration to new network contract      Call storage to get list of reserves supporting token -> eth",
					"params": {
						"add": "If true, then give reserve token allowance, otherwise set zero allowance",
						"endIndex": "end index in reserves list (can be larger)",
						"startIndex": "start index in reserves list",
						"token": "Token address"
					}
				},
				"listTokenForReserve(address,address,bool)": {
					"details": "Allow or prevent to trade token -> eth for a reserve",
					"params": {
						"add": "If true, then give reserve token allowance, otherwise set zero allowance",
						"reserve": "The reserve address",
						"token": "Token address"
					}
				},
				"tradeWithHint(address,address,uint256,address,address,uint256,uint256,address,bytes)": {
					"details": "Trade from src to dest token and sends dest token to destAddress",
					"params": {
						"dest": "Destination token",
						"destAddress": "Address to send tokens to",
						"hint": "Advanced instructions for running the trade ",
						"maxDestAmount": "A limit on the amount of dest tokens in twei",
						"minConversionRate": "The minimal conversion rate. If actual rate is lower, trade reverts",
						"src": "Source token",
						"srcAmount": "Amount of src tokens in twei",
						"trader": "Address of the taker side of this trade",
						"walletId": "Platform wallet address for receiving fees"
					},
					"returns": {
						"destAmount": "Amount of actual dest tokens in twei"
					}
				},
				"tradeWithHintAndFee(address,address,uint256,address,address,uint256,uint256,address,uint256,bytes)": {
					"details": "Trade from src to dest token and sends dest token to destAddress",
					"params": {
						"dest": "Destination token",
						"destAddress": "Address to send tokens to",
						"hint": "Advanced instructions for running the trade ",
						"maxDestAmount": "A limit on the amount of dest tokens in twei",
						"minConversionRate": "The minimal conversion rate. If actual rate is lower, trade reverts",
						"platformFeeBps": "Part of the trade that is allocated as fee to platform wallet. Ex: 1000 = 10%",
						"platformWallet": "Platform wallet address for receiving fees",
						"src": "Source token",
						"srcAmount": "Amount of src tokens in twei",
						"trader": "Address of the taker side of this trade"
					},
					"returns": {
						"destAmount": "Amount of actual dest tokens in twei"
					}
				},
				"transferAdmin(address)": {
					"details": "Allows the current admin to set the pendingAdmin address",
					"params": {
						"newAdmin": "The address to transfer ownership to"
					}
				},
				"transferAdminQuickly(address)": {
					"details": "Allows the current admin to set the admin in one tx. Useful initial deployment.",
					"params": {
						"newAdmin": "The address to transfer ownership to."
					}
				},
				"withdrawEther(uint256,address)": {
					"details": "Withdraw Ethers"
				},
				"withdrawToken(address,uint256,address)": {
					"details": "Withdraw all IERC20 compatible tokens",
					"params": {
						"token": "IERC20 The address of the token contract"
					}
				}
			},
			"title": "kyberNetwork main contract   Interacts with contracts:       kyberDao: to retrieve fee data       kyberFeeHandler: accumulates and distributes trade fees       kyberMatchingEngine: parse user hint and run reserve matching algorithm       kyberStorage: store / access reserves, token listings and contract addresses       kyberReserve(s): query rate and trade",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"enabled()": {
					"notice": "returns status of the network. If disabled, trades cannot happen."
				},
				"getAndUpdateNetworkFee()": {
					"notice": "Gets network fee from the kyberDao (or use default).     For trade function, so that data can be updated and cached."
				},
				"getExpectedRate(address,address,uint256)": {
					"notice": "Backward compatible API"
				},
				"getNetworkData()": {
					"notice": "Returns some data about the network"
				},
				"listReservesForToken(address,uint256,uint256,bool)": {
					"notice": "Can be called only by operator"
				},
				"listTokenForReserve(address,address,bool)": {
					"notice": "Can be called only by kyberStorage"
				},
				"maxGasPrice()": {
					"notice": "returns the max gas price allowable for trades"
				},
				"tradeWithHint(address,address,uint256,address,address,uint256,uint256,address,bytes)": {
					"notice": "Backward compatible functionUse token address ETH_TOKEN_ADDRESS for ether"
				},
				"tradeWithHintAndFee(address,address,uint256,address,address,uint256,uint256,address,uint256,bytes)": {
					"notice": "Use token address ETH_TOKEN_ADDRESS for ether"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/Contracts/KyberNetwork.sol": "KyberNetwork"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"node_modules/@openzeppelin/contracts/math/SafeMath.sol": {
			"keccak256": "0x2fedd3a10f0d561aa6edfb743d3a854a3e92f7ff3d7f294de259cd779177e134",
			"license": "MIT",
			"urls": [
				"bzz-raw://53ecf080278d4c9be7d289c04a029d58f2e7e48c5a39b067ee9af3be7360bb95",
				"dweb:/ipfs/QmeRMHESDb6PnYBiYhpkQnHQSjZAdtWJwPxZYfNuXpfZkL"
			]
		},
		"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x977b83d350bd4961dcbb2804174a0cc15685c76a575f09f34e2e016029cacabe",
			"license": "MIT",
			"urls": [
				"bzz-raw://a51762f894dbeb296462fb00d49482debb1b029b76f5e6df8528828bfce26b97",
				"dweb:/ipfs/QmYh3cubEZEMCJQFEBmHCtaP3JMAuZ4WNpQ5QcTgq59NvX"
			]
		},
		"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x5c99c26cba04882d6cf71f2004af17ecd366d1edd281f94645ead365fbfcf16e",
			"license": "MIT",
			"urls": [
				"bzz-raw://7890857ce2b63821bb357de01455247c3dcfb03c032a0aaeebcc373b7dd51cf5",
				"dweb:/ipfs/QmbpNvNdrNQq29k1JjHCE5onRUrmz19JvYcSnbW3gGWvZA"
			]
		},
		"node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
			"keccak256": "0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3a849c2d95e85463909e5b5c920b13e7a11216ca14127085e16d22b9379d52a",
				"dweb:/ipfs/QmUg3CZDbCCcQdroEpexBy5ZFd5vD1UWijWQq9qHZjtJNQ"
			]
		},
		"node_modules/@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea",
			"license": "MIT",
			"urls": [
				"bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c",
				"dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN"
			]
		},
		"node_modules/@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0",
			"license": "MIT",
			"urls": [
				"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f",
				"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"
			]
		},
		"src/Contracts/KyberNetwork.sol": {
			"keccak256": "0x121866320cdcb8ec12b07bd447fd69a65401db2a2a440985676e0d3274ab49a4",
			"urls": [
				"bzz-raw://7789f1b26f0d6dfd31ef858d3cbcddc2a6eb4aaa8a9fcdaf78053858f7a3a081",
				"dweb:/ipfs/Qma1G5bQDp1myCdvCwdSvKJv1mWZyPGf7MP8zLVx32Txr4"
			]
		}
	},
	"version": 1
}